//****************************************************************************
//
//
//
//****************************************************************************


 
 
// ===========================================================================
//                                   Libraries
// ===========================================================================



// ===========================================================================
//                                 Project Files
// ===========================================================================
#include "Agent.h"




//############################################################################
//                                                                           #
//                                 Class Agent                               #
//                                                                           #
//############################################################################

// ===========================================================================
//                         Definition of static attributes
// ===========================================================================

// ===========================================================================
//                                  Constructors
// ===========================================================================
Agent::Agent(void)
{
	x=0;
	y=0;
	step=0.5;
	initial_speed=0;
	k=0;
	o=0;
	k2=0;

}

// ===========================================================================
//                                  Destructor
// ===========================================================================
Agent::~Agent(void)
{
}

// ===========================================================================
//                                 Public Methods
// ===========================================================================
/*
void Agent::position(void){

	int i;
	float t;
	for(t=0; t<1000;t+step){
		for (i = 0; i < N; i+2)
		{
			store[i]=store[i]+(step*global_speed(t));
			store[i+1]=store[i+1]+(step*global_speed(t));
		}
	}

}
*/
// ===========================================================================
//                                Protected Methods
// ===========================================================================

// ===========================================================================
//                               Non inline accessors
// ===========================================================================
